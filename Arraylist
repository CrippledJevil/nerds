public class MyArrayList {
    private Object[] arrayStorage; // This is where our items are stored.
    private int numberOfItems; // This counts how many items we have added.

    // Constructor
    public MyArrayList() {
        arrayStorage = new Object[10]; // We start with space for 10 items.
        numberOfItems = 0; // At the start, we have added 0 items.
    }

    // STEP 2: Return PHYSICAL SIZE of the array
    public int getPhysicalSize() {
        return arrayStorage.length;
    }

    // STEP 2: Return LOGICAL SIZE of the array
    public int getLogicalSize() {
        return numberOfItems;
    }

    // STEP 3: Add an element to the END of the array
    public void addToEnd(Object item) {
        // If we're out of space, make more room.
        if (numberOfItems == arrayStorage.length) {
            makeMoreRoom();
        }
        arrayStorage[numberOfItems] = item;
        numberOfItems++;
    }

    // STEP 5: Double the size of the array if it gets full
    private void makeMoreRoom() {
        Object[] biggerStorage = new Object[arrayStorage.length * 2];
        for (int i = 0; i < arrayStorage.length; i++) {
            biggerStorage[i] = arrayStorage[i];
        }
        arrayStorage = biggerStorage;
    }

    // STEP 4: Add an Element to the Beginning of the array
    public void addToStart(Object item) {
        if (numberOfItems == arrayStorage.length) {
            makeMoreRoom();
        }
        for (int i = numberOfItems; i > 0; i--) {
            arrayStorage[i] = arrayStorage[i - 1];
        }
        arrayStorage[0] = item;
        numberOfItems++;
    }

    // STEP 6: Find a given element in the array and tell if it exists or not
    public int findItem(Object item) {
        for (int i = 0; i < numberOfItems; i++) {
            if (arrayStorage[i].equals(item)) {
                return i;
            }
        }
        return -1; // -1 indicates item not found
    }

    // STEP 7: Return the object at a given INDEX
    public Object getItemAt(int position) {
        if (position >= 0 && position < numberOfItems) {
            return arrayStorage[position];
        }
        return null; // If the position is invalid, return null.
    }

    // STEP 8: Remove a specified array element and close any gaps
    public void removeItem(Object item) {
        int position = findItem(item);
        if (position == -1) {
            System.out.println("Item not found!");
            return;
        }
        for (int i = position; i < numberOfItems - 1; i++) {
            arrayStorage[i] = arrayStorage[i + 1];
        }
        numberOfItems--;
    }

    // STEP 9: DISPLAY all of the elements in the array
    public void displayItems() {
        for (int i = 0; i < numberOfItems; i++) {
            System.out.print(arrayStorage[i] + " ");
        }
        System.out.println();
    }
}
